
# This script follows 
# http://www.gnu.org/software/autoconf/manual/html_node/Autoconf-Input-Layout.html#Autoconf-Input-Layout
# Please keep it like that.

# Guessing some version.
AC_PREREQ(2.54)

m4_define([ccss_version_major], [0])
m4_define([ccss_version_minor], [2])
m4_define([ccss_version_micro], [0])
### For the release:
# m4_define([ccss_version_extra], [])
### On trunk:
m4_define([ccss_version_extra], [.trunk])
m4_define([ccss_version],
    [ccss_version_major.ccss_version_minor.ccss_version_micro[]ccss_version_extra])

AC_INIT([libccss], [ccss_version])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_SRCDIR([ccss/ccss-stylesheet.c])

AM_INIT_AUTOMAKE
AM_MAINTAINER_MODE

dnl Version info for libraries = CURRENT:REVISION:AGE
dnl
dnl Within each x.y.*, ABI is maintained backward and _forward_ compatible.
dnl (As a consequence, no exported function may be added.)
dnl So it's enough to have one interface number per each x.y.* branch.
dnl
dnl OTOH, we are not able to keep ABI strictly backward compatible throughout
dnl the whole x.*.*.
dnl The easiest way is to declare no ABI compatibility, ie. AGE is always 0.
dnl
m4_define([version_iface],
	m4_eval(100 * ccss_version_major + ccss_version_minor))

AC_SUBST([VERSION_INFO], [version_iface:ccss_version_micro:0])


### Checks for configure arguments. ############################################

AC_ARG_ENABLE([debug], 
  [AS_HELP_STRING([--enable-debug], [enable debug code])], 
[
  enable_debug="$enableval"
],[
  enable_debug="no"
])

if test "$enable_debug" == "yes"; then
  AC_DEFINE([CCSS_DEBUG], [1], [enable debug code])
  CFLAGS="-g -O0 ${CFLAGS}"
fi
AM_CONDITIONAL([CCSS_DEBUG], test "$enable_debug" == "yes")


# So usually one just sets CFLAGS for this, but a configure 
# arguments lets us force this when running `make distcheck'.
AC_ARG_ENABLE([werror], 
  [AS_HELP_STRING([--enable-werror], [bail on warnings])], 
[
  if test "$enableval" == "yes"; then
    CFLAGS="$CFLAGS -Werror"
  fi  
])


### Checks for programs. #######################################################

AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

# Should be replaced by LT_INIT, which apparently doesn't work.
# Try again some time.
AC_DISABLE_STATIC
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL 

# gtk-doc
gtk_doc_installed=true
#ifdef([GTK_DOC_CHECK],[GTK_DOC_CHECK([1.0])],[gtk_doc_installed=false])
# I would have liked to conditionalize this, but 
# that appears to break other things http://bugzilla.gnome.org/show_bug.cgi?id=156399
GTK_DOC_CHECK([1.0])
AM_CONDITIONAL(GTK_DOC_INSTALLED, $gtk_doc_installed)


### Checks for libraries. ######################################################

### ccss ###

# GObject is needed for GValue.
ccss_reqs='glib-2.0 gobject-2.0 libcroco-0.6'
ccss_pkgs=

# See http://bugzilla.gnome.org/show_bug.cgi?id=553937 .
PKG_CHECK_EXISTS([ libcroco-0.6 >= 0.6.2 ],
[
  enable_libcroco_workaround="no"
],[
  enable_libcroco_workaround="yes"
])
if test "$enable_libcroco_workaround" = "yes"; then
  AC_DEFINE([CCSS_ENABLE_LIBCROCO_WORKAROUND], [1], [Work around libcroco issue #553937])
fi

# Unconditional requirement.
ccss_pkgs=${ccss_reqs}

PKG_CHECK_MODULES(CCSS, $ccss_pkgs)

# AC_SUBST([CCSS_CFLAGS]) # set further down
# AC_SUBST([CCSS_LIBS]) # set further down
# AC_SUBST([CCSS_DEPS], $ccss_pkgs) # set further down


### ccss-cairo ###

# Guessing a version.
ccss_cairo_reqs='cairo >= 1.4'
ccss_cairo_pkgs=


PKG_CHECK_EXISTS([ $ccss_cairo_reqs ],
[
  with_cairo="yes"
  ccss_cairo_pkgs="$ccss_cairo_pkgs $ccss_cairo_reqs"
],[
  with_cairo="no"
  # FIXME: conditionalise after ccss-cairo split out.
  AC_MSG_ERROR([Missing dependency: \`$ccss_cairo_reqs' is required to build libccss.])
])

if test "$with_cairo" = "yes"; then
  AC_DEFINE([CCSS_WITH_CAIRO], [1], [Cairo drawing support])
fi
AM_CONDITIONAL([CCSS_WITH_CAIRO], [test "$with_cairo" = "yes"])
AC_SUBST([ccss_with_cairo], [$with_cairo])

### SVG support, guessing a good rsvg version.
rsvg_reqs='librsvg-2.0 >= 2.16'
AC_ARG_WITH([rsvg],
            [AS_HELP_STRING([--without-rsvg], [ccss-cairo: do not build SVG image support.])],
[
  with_rsvg="$withval"  
], [
  # default
  with_rsvg="yes"
])
if test "$with_rsvg" != "no"; then
  ccss_cairo_pkgs="$ccss_cairo_pkgs $rsvg_reqs"
  AC_DEFINE([CCSS_WITH_RSVG], [1], [SVG support through librsvg])
fi
AM_CONDITIONAL([CCSS_WITH_RSVG], [test "$with_rsvg" = "yes"])
AC_SUBST([ccss_with_rsvg], [$with_rsvg])

### SVG fragment support using libsoup.
### FIXME: activate after fragment-dimension API landed in librsvg.
with_libsoup="no"
soup_reqs='libsoup-2.4'
AM_CONDITIONAL([CCSS_WITH_LIBSOUP], [test "$with_libsoup" = "yes"])


with_cairo="yes"
AC_ARG_WITH([cairo],
            [AS_HELP_STRING([--without-cairo], [do not build ccss-cairo.])])
if test "$with_cairo" != "no"; then
  ccss_cairo_pkgs="$ccss_pkgs $ccss_cairo_pkgs"
  PKG_CHECK_MODULES(CCSS_CAIRO, $ccss_cairo_pkgs)
  # AC_SUBST([CCSS_CAIRO_CFLAGS]) ... set further down
  AC_SUBST([CCSS_CAIRO_LIBS])
  AC_SUBST([CCSS_CAIRO_DEPS], "$ccss_cairo_pkgs libccss-1")
else
  AC_MSG_ERROR([FIXME: cairo is not yet optional.])
fi


### ccss-clutter ###

ccss_clutter_reqs='clutter-cairo-0.8'
ccss_clutter_pkgs=

PKG_CHECK_EXISTS([ $ccss_clutter_reqs ],
[
  with_clutter="yes"
  ccss_clutter_pkgs="$ccss_clutter_pkgs $ccss_clutter_reqs"
],[
  with_clutter="no"
])

if test "$with_clutter" = "yes"; then
  AC_DEFINE([CCSS_WITH_CLUTTER], [1], [Support for clutter-cairo (experimental)])
fi
AM_CONDITIONAL([CCSS_WITH_CLUTTER], [test "$with_clutter" = "yes"])
AC_SUBST([ccss_with_clutter], [$with_clutter])

if test "$with_clutter" = "yes"; then
  ccss_clutter_pkgs="$ccss_cairo_pkgs $ccss_clutter_pkgs"
  PKG_CHECK_MODULES(CCSS_CLUTTER, $ccss_clutter_pkgs)
fi
# AC_SUBST([CCSS_CLUTTER_CFLAGS]) # set further down
AC_SUBST([CCSS_CLUTTER_LIBS])
AC_SUBST([CCSS_CLUTTER_DEPS], $ccss_clutter_pkgs)


### Checks for header files. ###################################################

AC_HEADER_STDC
AC_CHECK_HEADERS([stdbool.h stddef.h stdint.h stdio.h stdlib.h string.h])


### Checks for typedefs, structures, and compiler characteristics. #############

AC_C_CONST

extra_cflags=
if test "$GCC" = "yes"; then
  orig_cflags=${CFLAGS}
  for option in -std=c99 -pedantic -Wall -Wbitwise -Wcast-to-as			\
    -Wchar-subscripts -Wdeclaration-after-statement -Wdefault-bitfield-sign	\
    -Wdo-while -Wmissing-declarations -Wmissing-noreturn -Wmissing-prototypes	\
    -Wnested-externs -Wno-pointer-sign -Wparen-string -Wpointer-arith		\
    -Wptr-subtraction-blows -Wreturn-void -Wsign-compare -Wstrict-prototypes	\
    -Wtypesign -Wwrite-strings ; do
    SAVE_CFLAGS="$CFLAGS"
    CFLAGS="$CFLAGS $option"
    AC_MSG_CHECKING([whether gcc understands $option])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],[has_option=yes],[has_option=no])
    if test $has_option = no; then
      CFLAGS="$SAVE_CFLAGS"
    else
      extra_cflags="${extra_cflags} $option"
    fi
    AC_MSG_RESULT($has_option)
    unset has_option
    unset SAVE_CFLAGS
  done
  unset option
  CFLAGS=${orig_cflags}
fi

CCSS_CFLAGS="${CCSS_CFLAGS} ${extra_cflags}"
CCSS_DEPS="${ccss_pkgs}"
AC_SUBST([CCSS_CFLAGS])
AC_SUBST([CCSS_LIBS])
AC_SUBST([CCSS_DEPS])

CCSS_CAIRO_CFLAGS="${CCSS_CAIRO_CFLAGS} ${extra_cflags}"
AC_SUBST([CCSS_CAIRO_CFLAGS])

CCSS_CLUTTER_CFLAGS="${CCSS_CLUTTER_CFLAGS} ${extra_cflags}"
AC_SUBST([CCSS_CLUTTER_CFLAGS])

AC_CONFIG_FILES([
  Makefile
  libccss-1.pc
  libccss-cairo-1.pc
  ccss/Makefile
  ccss-cairo/Makefile
  ccss-clutter/Makefile
  doc/Makefile
  doc/version.xml
  examples/Makefile
])
AC_OUTPUT

echo "
Configuration
-------------

Configuration:
    Build debugging code         $enable_debug

ccss:                            yes
    Workaround for #553937       $enable_libcroco_workaround (see bugzilla.gnome.org)

ccss-cairo:                      $with_cairo
    Support for SVG images       $with_rsvg (requires $rsvg_reqs)
    Support for SVG fragments    $with_libsoup (WIP, requires $soup_reqs)

ccss-clutter:                    $with_clutter (experimental, requires $ccss_clutter_reqs)
"

